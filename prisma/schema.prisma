generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql" //"postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Resident {
  id               String             @id @default(uuid())
  // accountNumber    Int                @default(autoincrement())
  name             String
  phase            String
  block            String
  lot              String
  contactNumber    String?
  email            String?
  isAdmin          Boolean            @default(false)
  isWaterActive    Boolean?           @default(false)
  role             String
  userId           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  dues             Dues[]             @relation("Dues")
  stickers         Sticker[]          @relation("stickerToResident")
  waterBilling     WaterBilling[]     @relation("WaterBilling")
  waterConsumption WaterConsumption[] @relation("WaterConsumption")
}

model WaterConsumption {
  id           String   @id @default(uuid())
  residentId   String
  previousRead String
  currentRead  String
  consumption  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  resident     Resident @relation("WaterConsumption", fields: [residentId], references: [id])

  @@index([residentId])
}

model WaterBilling {
  id          String   @id @default(uuid())
  residentId  String
  billingDate String
  amount      Float
  isPaid      Boolean  @default(false)
  remarks     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resident    Resident @relation("WaterBilling", fields: [residentId], references: [id])

  @@index([residentId])
}

model WaterPrice {
  id        String   @id @default(uuid())
  price     Float
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dues {
  id         String   @id @default(uuid())
  residentId String
  amount     Float
  isPaid     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  resident   Resident @relation("Dues", fields: [residentId], references: [id])

  @@index([residentId])
}

model DuesPrice {
  id        String   @id @default(uuid())
  price     Decimal  @db.Decimal(10, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sticker {
  id            String   @id @default(uuid())
  residentId    String
  role          String
  name          String
  driverLicense String
  stickerNumber String
  stickerColor  String
  quantity      Int      @default(1)
  amount        Decimal  @db.Decimal(10, 2)
  plate         String
  vehicleType   String
  vehicleColor  String
  stickerDate   String
  userId        String
  resident      Resident @relation("stickerToResident", fields: [residentId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([residentId])
}

model StickerPrice {
  id        String   @id @default(uuid())
  name      String
  price     Decimal  @db.Decimal(10, 2)
  color     Color    @default(GREEN)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(false)
}

model Log {
  id        String   @id @default(uuid())
  title     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Role {
  HOMEOWNER
  TENANT
  DELIVERY
  VISITOR
  SPECIAL
}

enum Color {
  GREEN
  YELLOW
  RED
  WHITE
  SILVER
}
